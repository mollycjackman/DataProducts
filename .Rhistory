set.seed(62433)
names(training)
#train models and generate predications
modFit<-train(diagnosis~., data = training, method = "rf")
modFit2<-train(diagnosis~., data = training, method = "gbm")
modFit3<-train(diagnosis~., data = training, method = "lda")
pred1<-predict(modFit, testing)
pred2<-predict(modFit2, testing)
pred3<-predict(modFit3, testing)
#combine models
predDF<-data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
combPred<-predict(comMod, predDF)
#calculate accuracy
#rf
sum(pred1 == testing$diagnosis)/length(testing$diagnosis)
#gbm
sum(pred2 == testing$diagnosis)/length(testing$diagnosis)
#lda
sum(pred3 == testing$diagnosis)/length(testing$diagnosis)
#combined
sum(combPred == testing$diagnosis)/length(testing$diagnosis)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
combPred<-predict(comMod, testing)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
combPred<-predict(comMod, testing)
#calculate accuracy
#rf
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pRF <- predict(fitRF, testing)
pGBM <- predict(fitGBM, testing)
pLDA <- predict(fitLDA, testing)
combinedset <- data.frame(pRF, pGBM, pLDA, diagnosis = testing$diagnosis)
fit <- train(diagnosis~., combinedset, method="rf")
predict <- predict(fit, testing)
cmRF <- confusionMatrix(pRF, testing$diagnosis)
cmGBF <- confusionMatrix(pGBM, testing$diagnosis)
cmLDA <- confusionMatrix(pLDA, testing$diagnosis)
cm <- confusionMatrix(predict, testing$diagnosis)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(gbm)
library(mgcv)
library(nlme)
library(elasticnet)
install.packages("elasticnet")
library(elasticnet)
predDF
predDF<-data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
comMod
combPred<-predict(comMod, testing)
confusionMatrix(combPred, testing$diagnosis)
rm(list = ls())
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_rf = train(diagnosis ~ ., method = 'rf', data = training)
model_gbm = train(diagnosis ~ ., method = 'gbm', data = training)
model_lda = train(diagnosis ~ ., method = 'lda', data = training)
pred_rf = predict(model_rf, training)
pred_gbm = predict(model_gbm, training)
pred_lda = predict(model_lda, training)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
#calculate accuracy
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
set.seed(62433)
#train models and generate predications
modFit<-train(diagnosis~., data = training, method = "rf")
modFit2<-train(diagnosis~., data = training, method = "gbm")
modFit3<-train(diagnosis~., data = training, method = "lda")
pred1<-predict(modFit, testing)
pred2<-predict(modFit2, testing)
pred3<-predict(modFit3, testing)
#combine models
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
combPred<-predict(comMod, testing)
#calculate accuracy
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
predDF
pred1
pred2
pred3
training$diagnosis
pred1<-predict(modFit, training)
pred2<-predict(modFit2, training)
pred3<-predict(modFit3, training)
#combine models
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
combPred<-predict(comMod, testing)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
length(testing)
length(training)
training = adData[ inTrain,]
testing = adData[-inTrain,]
pred1<-predict(modFit, training)
length(pred21)
length(pred1)
length(training$diagnosis)
length(training)
training
pred1<-predict(modFit, testing)
pred2<-predict(modFit2, testing)
pred3<-predict(modFit3, testing)
predDF<-data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
combPred<-predict(comMod, testing)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
rm(list = ls())
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_rf = train(diagnosis ~ ., method = 'rf', data = training)
model_gbm = train(diagnosis ~ ., method = 'gbm', data = training)
model_lda = train(diagnosis ~ ., method = 'lda', data = training)
pred_rf = predict(model_rf, training)
pred_gbm = predict(model_gbm, training)
pred_lda = predict(model_lda, training)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
accuracy_rf
accuracy_comb
pred1<-predict(modFit, training)
pred2<-predict(modFit2, training)
pred3<-predict(modFit3, training)
#combine models
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
#predict on test data
pred1a<-predict(modFit, testing)
pred2a<-predict(modFit2, testing)
pred3a<-predict(modFit3, testing)
combPreda<-predict(comMod, testing)
#calculate accuracy
#rf
confusionMatrix(pred1a, testing$diagnosis)
confusionMatrix(pred2a, testing$diagnosis)
confusionMatrix(pred3a, testing$diagnosis)
confusionMatrix(combPreda, testing$diagnosis)
modFit<-train(diagnosis~., data = training, method = "rf")
modFit2<-train(diagnosis~., data = training, method = "gbm")
modFit3<-train(diagnosis~., data = training, method = "lda")
pred1<-predict(modFit, training)
pred2<-predict(modFit2, training)
pred3<-predict(modFit3, training)
#combine models
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
#predict on test data
pred1a<-predict(modFit, testing)
pred2a<-predict(modFit2, testing)
pred3a<-predict(modFit3, testing)
combPreda<-predict(comMod, testing)
predDFa<-data.frame(pred1a, pred2a, pred3a, diagnosis = testing$diagnosis)
combPreda<-predict(comMod, predDFa)
predDFa<-data.frame(pred1a, pred2a, pred3a, diagnosis = testing$diagnosis)
combPreda<-predict(comMod, predDFa)
pred1a<-predict(modFit, testing)
pred2a<-predict(modFit2, testing)
pred3a<-predict(modFit3, testing)
length(pred1a)
predDFa<-data.frame(pred1a, pred2a, pred3a, diagnosis = testing$diagnosis)
combPreda<-predict(comMod, predDFa)
pred1a<-predict(modFit, testing)
pred2a<-predict(modFit2, testing)
pred3a<-predict(modFit3, testing)
predDFa<-data.frame(pred1a, pred2a, pred3a, diagnosis = testing$diagnosis)
combPreda<-predict(comMod, predDFa)
comMod<-train(diagnosis~., method = "rf", data = predDFa)
combPreda<-predict(comMod, predDFa)
confusionMatrix(pred2a, testing$diagnosis)
confusionMatrix(pred3a, testing$diagnosis)
confusionMatrix(combPreda, testing$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
predDFa<-data.frame(pred1a, pred2a, pred3a, diagnosis = testing$diagnosis)
combPreda<-predict(comMod, predDFa)
combPreda
confusionMatrix(combPreda, testing$diagnosis)
test<-predict(modFit3, testing)
pred1<-predict(modFit, training)
pred2<-predict(modFit2, training)
pred3<-predict(modFit3, training)
#combine models
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
predict(comMod, predDFa)
rm(list = ls())
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_rf = train(diagnosis ~ ., method = 'rf', data = training)
model_gbm = train(diagnosis ~ ., method = 'gbm', data = training)
model_lda = train(diagnosis ~ ., method = 'lda', data = training)
pred_rf = predict(model_rf, training)
pred_gbm = predict(model_gbm, training)
pred_lda = predict(model_lda, training)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
modFit<-train(diagnosis~., data = training, method = "rf")
modFit2<-train(diagnosis~., data = training, method = "gbm")
modFit3<-train(diagnosis~., data = training, method = "lda")
pred1<-predict(modFit, training)
pred2<-predict(modFit2, training)
pred3<-predict(modFit3, training)
#combine models
predDF<-data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
comMod<-train(diagnosis~., method = "rf", data = predDF)
pred1a<-predict(modFit, testing)
pred2a<-predict(modFit2, testing)
pred3a<-predict(modFit3, testing)
predDFa<-data.frame(pred1a, pred2a, pred3a, diagnosis = testing$diagnosis)
combPreda<-predict(comMod, predDFa)
pred_comb_test = predict(comMod, predDFa)
model_rf<-train(diagnosis~., data = training, method = "rf")
model_gbm<-train(diagnosis~., data = training, method = "gbm")
model_lda<-train(diagnosis~., data = training, method = "lda")
pred_rf<-predict(model_rf, training)
pred_gbm<-predict(model_gbm, training)
pred_lda<-predict(model_lda, training)
comb_data<-data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb<-train(diagnosis~., method = "rf", data = comb_data)
pred_rf_test<-predict(model_rf, testing)
pred_gbm_test<-predict(model_gbm, testing)
pred_lda_test<-predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
pred_comb_test = predict(model_comb, comb_data_test)
confusionMatrix(pred_rf_test, testing$diagnosis)
confusionMatrix(pred_gbm_test, testing$diagnosis)
confusionMatrix(pred_lda_test, testing$diagnosis)
confusionMatrix(pred_comb_test, testing$diagnosis)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
set.seed(62433)
names(training)
#train models and generate predications
model_rf<-train(diagnosis~., data = training, method = "rf")
model_gbm<-train(diagnosis~., data = training, method = "gbm")
model_lda<-train(diagnosis~., data = training, method = "lda")
pred_rf<-predict(model_rf, training)
pred_gbm<-predict(model_gbm, training)
pred_lda<-predict(model_lda, training)
#combine models
comb_data<-data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb<-train(diagnosis~., method = "rf", data = comb_data)
#predict on test data
pred_rf_test<-predict(model_rf, testing)
pred_gbm_test<-predict(model_gbm, testing)
pred_lda_test<-predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
#calculate accuracy
#rf
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
print(accuracy_rf, accuracy_gbm, accuracy_lda, accuracy_comb)
print(c(accuracy_rf, accuracy_gbm, accuracy_lda, accuracy_comb))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
names(training)
set.seed(233)
mod<-train(CompressiveStrength~., data = training, method = "lasso")
?plot.enet
install.packages("elasticnet")
install.packages("elasticnet")
library(elasticnet)
modPred<-predict(mod, testing)
plot.enet(modPred$finalModel, xvar = "penalty", use.color=T)
modPred<-predict(mod, testing)
plot.enet(mod$finalModel, xvar = "penalty", use.color=T)
model_comb<-train(diagnosis~., method = "rf", data = comb_data)
library(caret)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
names(training)
#train models and generate predications
model_rf<-train(diagnosis~., data = training, method = "rf")
model_gbm<-train(diagnosis~., data = training, method = "gbm")
model_lda<-train(diagnosis~., data = training, method = "lda")
pred_rf<-predict(model_rf, training)
pred_gbm<-predict(model_gbm, training)
pred_lda<-predict(model_lda, training)
#combine models
comb_data<-data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb<-train(diagnosis~., method = "rf", data = comb_data)
#predict on test data
pred_rf_test<-predict(model_rf, testing)
pred_gbm_test<-predict(model_gbm, testing)
pred_lda_test<-predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
print(c(accuracy_rf, accuracy_gbm, accuracy_lda, accuracy_comb))
library(lubridate)  # For year() function below
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
install.packages("lubridate", dependencies = TRUE)
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
names(dat)
head(dat)
?as.date
?lubridate
?date
dat$date<-as.Date(dat$date, format = "%Y-%m-%d")
training = dat[year(dat$date) < 2012,]
year(dat$date)
library(lubridate)  # For year() function below
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
?bats
names(training)
bats(training$visitsTumblr)
library(forecast)
bats(training$visitsTumblr)
install.packages("devtools")
install.packages("rtools")
install.packages("Rtools")
install.packages("shiny")
I submitted these predictions, and all 20 were correct.
shiny::runApp('Dropbox/Programming/DataProducts/courseProject1')
setwd("~/Dropbox/Programming/DataProducts/courseProject1")
nom<-read.dta("nomData.DTA")
library(foreign)
library(ggplot2)
library(dplyr)
setwd("~/Dropbox/Programming/DataProducts/courseProject1")
nom<-read.dta("nomData.DTA")
nom<-subset(nom, cong >=37)
nom$party[nom$party != 100 & nom$party != 200]<-300
nomSen<-read.dta("nomDataS.DTA")
nomSen<-subset(nomSen, cong>=37)
nomSen$party[nomSen$party != 100 & nomSen$party != 200]<-300
shiny::runApp()
library(slidify)
library(slidifyLibraries)
setwd("~/Dropbox/Programming/DataProducts/courseProject2")
runDeck('first_deck')
library(shiny)
runDeck('first_deck')
runDeck('first_deck')
library(knitr)
nom<-read.dta("nomData.DTA")
nom<-subset(nom, cong >=37)
nom$party[nom$party != 100 & nom$party != 200]<-300
nom37<-subset(nom, cong == 37)
37<-ggplot(ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +
geom_density(alpha=.5) +scale_fill_manual(values = c("blue","red", "green"), name = "Party", labels = c("Democrat", "Republicans", "Other"))+
xlab("DW-NOMINATE Ideal Point"))
setwd("~/Dropbox/Programming/DataProducts/courseProject1")
nom<-read.dta("nomData.DTA")
nom<-subset(nom, cong >=37)
nom$party[nom$party != 100 & nom$party != 200]<-300
nom37<-subset(nom, cong == 37)
37<-ggplot(ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +
geom_density(alpha=.5) +scale_fill_manual(values = c("blue","red", "green"), name = "Party", labels = c("Democrat", "Republicans", "Other"))+
xlab("DW-NOMINATE Ideal Point"))
37<-ggplot(ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"), name = "Party", labels = c("Democrat", "Republicans", "Other"))+ xlab("DW-NOMINATE Ideal Point"))
c37<-ggplot(ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"), name = "Party", labels = c("Democrat", "Republicans", "Other"))+ xlab("DW-NOMINATE Ideal Point"))
c37<-ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"), name = "Party", labels = c("Democrat", "Republicans", "Other"))+ xlab("DW-NOMINATE Ideal Point"))
head(nom37)
c37<-ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point"))
c37<-ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point")
c37
c37<-ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") + theme(legend.position = "none"))
c37<-ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") + theme(legend.position = "none")
c37
nom<-read.dta("nomData.DTA")
nom<-subset(nom, cong >=37)
nom$party[nom$party != 100 & nom$party != 200]<-300
nom37<-subset(nom, cong == 37)
c37<-ggplot(nom37, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") +
theme(legend.position = "none") + ggtitle("37th Congress (1861-1863)")
nom52<-subset(nom, cong == 52)
c52<-ggplot(nom52, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") +
theme(legend.position = "none") + ggtitle("52nd Congress (1891-1893)")
nom67<-subset(nom, cong == 67)
c67<-ggplot(nom67, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") +
theme(legend.position = "none") + ggtitle("67th Congress (1921-1923)")
nom82<-subset(nom, cong == 82)
c82<-ggplot(nom67, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") +
theme(legend.position = "none") + ggtitle("82nd Congress (1951-1953)")
nom97<-subset(nom, cong == 97)
c97<-ggplot(nom97, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") +
theme(legend.position = "none") + ggtitle("97th Congress (1981-1983)")
nom113<-subset(nom, cong == 113)
c113<-ggplot(nom113, aes(x=dwnom1, fill=factor(party))) +geom_density(alpha=.5) +
scale_fill_manual(values = c("blue","red", "green"))+ xlab("DW-NOMINATE Ideal Point") +
theme(legend.position = "none") + ggtitle("113th Congress (2013-2015)")
library(gridExtra)
plot<-grid.arrange(c37, c52, c67, c82, c97, c113, nrow=2)
install.packages("lda")
c37
setwd(~/Dropbox/Programming/DataProducts/courseProject2/first_deck/DataProducts_Slidify)
setwd("~/Dropbox/Programming/DataProducts/courseProject2/first_deck/DataProducts_Slidify")
publish(user = "mollycjackman", repo = "DataProducts_Slidify")
publish(user = "mollycjackman", repo = "Preferences_Pres")
publish(user = "mollycjackman", repo = "Preferences_Pres")
